name: PyTest, lint, build, and deploy
on:
  push:
    tags:
      - 'v*.*.*'

env:
  BUCKET_NAME: novai-ds-packages
  PACKAGE_NAME: my_package
  ECR_REPOSITORY: 021271968172.dkr.ecr.eu-west-2.amazonaws.com/my_package

permissions:
  id-token: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          check-latest: true

      - name: Install poetry and dependencies
        run: |
          pip install poetry==1.2.1
          poetry install

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --max-complexity=10 --statistics

      - name: Run unit tests
        run: |
          make test

      - name: check git tag matches pyproject version
        run: |
          version=$(cat pyproject.toml | grep version | awk -F = '{print $2}' | xargs)
          git_tag=$(echo $GITHUB_REF | awk -F / '{print $3}' | sed 's/^v//' | xargs)
          if [ "$version" != "$git_tag" ]; then
            echo "Git tag $git_tag does not match pyproject version $version"
            exit 1
          fi

      - name: build python wheel
        run: |
          poetry build --format wheel

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::021271968172:role/GithubOpenIDConnect
          aws-region: eu-west-2

      # Upload a file to AWS s3
      - name:  Copy wheel to s3
        run: |
          version=$(cat pyproject.toml | grep version | awk -F = '{print $2}' | xargs)
          aws s3 cp dist/${{env.PACKAGE_NAME}}-${version}-py3-none-any.whl s3://${{env.BUCKET_NAME}}/${{env.PACKAGE_NAME}}/${{env.PACKAGE_NAME}}-${version}-py3-none-any.whl

      - name: login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Build, tag, and push image to Amazon ECR
        run: |
              version=$(cat pyproject.toml | grep version | awk -F = '{print $2}' | xargs)
              git_hash=$(git rev-parse --short "$GITHUB_SHA")
              docker build -t ${{env.ECR_REPOSITORY}}:$version .
              docker tag ${{env.ECR_REPOSITORY}}:$version ${{env.ECR_REPOSITORY}}:$git_hash
              docker tag ${{env.ECR_REPOSITORY}}:$version ${{env.ECR_REPOSITORY}}:latest
              docker push ${{env.ECR_REPOSITORY}}:$version
              docker push ${{env.ECR_REPOSITORY}}:latest
              docker push ${{env.ECR_REPOSITORY}}:$git_hash

